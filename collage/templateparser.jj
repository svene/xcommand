options {
  STATIC = false;
  JAVA_UNICODE_ESCAPE = false;
}

PARSER_BEGIN(TemplateParser)

package org.collage.jcc;

import org.collage.parser.IParserModeCV;
import org.xcommand.pattern.observer.BasicNotifier;
import org.xcommand.pattern.observer.INotifier;
import org.xcommand.template.parser.IParserCV;
import org.xcommand.core.IDynaBeanProvider;
import org.xcommand.core.DynaBeanProvider;
import org.xcommand.core.ClassAndMethodKeyProvider;

public class TemplateParser
{

	public INotifier getStartNotifier() { return startNotifier; }
	public INotifier getVarStartNotifier() { return varStartNotifier; }
	public INotifier getVarNameNotifier() { return varNameNotifier; }
	public INotifier getVarEndNotifier() { return varEndNotifier; }
	public INotifier getEolNotifier() { return eolNotifier; }
	public INotifier getJavaStartNotifier() { return javaStartNotifier; }
	public INotifier getJavaEndNotifier() { return javaEndNotifier; }
	public INotifier getJavaCodeNotifier() { return javaCodeNotifier; }
	public INotifier getTextNotifier() { return textNotifier; }
	public INotifier getEofNotifier() { return eofNotifier; }

	private INotifier startNotifier = new BasicNotifier();
	private INotifier varStartNotifier = new BasicNotifier();
	private INotifier varNameNotifier = new BasicNotifier();
	private INotifier varEndNotifier = new BasicNotifier();
	private INotifier eolNotifier = new BasicNotifier();
	private INotifier javaStartNotifier = new BasicNotifier();
	private INotifier javaEndNotifier = new BasicNotifier();
	private INotifier javaCodeNotifier = new BasicNotifier();
	private INotifier textNotifier = new BasicNotifier();
	private INotifier eofNotifier = new BasicNotifier();

	private IDynaBeanProvider dbp = DynaBeanProvider.newThreadBasedDynabeanProvider(new ClassAndMethodKeyProvider());
	private IParserCV parserCV = (IParserCV) dbp.newBeanForInterface(IParserCV.class);
	private IParserModeCV parserModeCV = (IParserModeCV) dbp.newBeanForInterface(IParserModeCV.class);

	{
		// do initialization stuff here
	}

}
PARSER_END(TemplateParser)

TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
<DEFAULT> TOKEN : { < VAR_START : "${" >: IN_VAR_STATE}
<IN_VAR_STATE> TOKEN : { < VAR_END : "}" >: DEFAULT }
<IN_VAR_STATE> TOKEN : { <#DIGIT : ["0"-"9", "A"-"Z"] >}
<IN_VAR_STATE> TOKEN : { <#LETTER : ["a"-"z", "A"-"Z", "_"] >}
<IN_VAR_STATE> TOKEN : { < VAR_NAME : <LETTER>(<LETTER>|<DIGIT>)* > }
<DEFAULT> TOKEN : { < TEXT : ~[] > }

<DEFAULT> TOKEN : { < JAVA_START : "<?java" >: IN_JAVA_STATE}
<IN_JAVA_STATE> TOKEN : { < JAVA_END : "?>" >: DEFAULT }
<IN_JAVA_STATE> TOKEN : { < JAVA_CODE :~[] > }

void Start():
{
	//org: executeTokenHandler(aCtx, IParserModeCV.KEY_START_MODE);
	//startNotifier.execute(aCtx);
	startNotifier.execute();
}
{
	(
		varStart()
	|
		varName()
	|
		varEnd()
	|
		eol()
	|
		javaStart()
	|
		javaEnd()
	|
		javaCode()
	|
		text()
	)*
	eof()
}

void text():
{
	Token t;
}
{
	t = <TEXT>
	{
		parserCV.setToken(t);
		parserCV.setValue(t.image);
		parserModeCV.setMode(IParserModeCV.KEY_TEXT);
		textNotifier.execute();
	}
}

void varStart():
{
	Token t;
}
{
	t = <VAR_START>
	{
		parserCV.setToken(t);
		parserModeCV.setMode(IParserModeCV.KEY_VAR_START_MODE);
		varStartNotifier.execute();
	}
}

void varName():
{
	Token t;
}
{
	t = <VAR_NAME>
	{
		parserCV.setToken(t);
		parserCV.setValue(t.image);
		parserModeCV.setMode(IParserModeCV.KEY_VAR_NAME_MODE);
		varNameNotifier.execute();
	}
}

void varEnd():
{
	Token t;
}
{
	t = <VAR_END>
	{
		parserCV.setToken(t);
		parserModeCV.setMode(IParserModeCV.KEY_VAR_END_MODE);
		varEndNotifier.execute();
	}
}

void javaStart():
{
	Token t;
}
{
	t = <JAVA_START>
	{
		parserCV.setToken(t);
		parserModeCV.setMode(IParserModeCV.KEY_JAVA_START_MODE);
		javaStartNotifier.execute();
	}
}

void javaCode():
{
	Token t;
}
{
	t = <JAVA_CODE>
	{
		parserCV.setToken(t);
		parserCV.setValue(t.image);
		parserModeCV.setMode(IParserModeCV.KEY_JAVA_CODE_MODE);
		javaCodeNotifier.execute();
	}
}

void javaEnd():
{
	Token t;
}
{
	t = <JAVA_END>
	{
		parserCV.setToken(t);
		parserModeCV.setMode(IParserModeCV.KEY_JAVA_END_MODE);
		javaEndNotifier.execute();
	}
}

void eol():
{
	Token t;
}
{
	t = <EOL>
	{
		parserCV.setToken(t);
		parserModeCV.setMode(IParserModeCV.KEY_EOL);
		eolNotifier.execute();
	}
}

void eof():
{
	Token t;
}
{
	t = <EOF>
	{
		parserCV.setToken(t);
		parserModeCV.setMode(IParserModeCV.KEY_EOF);
		eofNotifier.execute();
	}
}

