options {
  STATIC = false;
  JAVA_UNICODE_ESCAPE = false;
}

PARSER_BEGIN(TemplateParser)

package org.collage.jcc;

import java.util.Map;
import org.collage.parser.*;
import org.xcommand.core.*;
import org.xcommand.core.multi.*;
import org.collage.csm.*;
import org.xcommand.pattern.observer.ISubject;
import org.xcommand.pattern.observer.SubjectImpl;

public class TemplateParser
{

	public ISubject getStartSubject() { return startSubject; }
	public ISubject getVarStartSubject() { return varStartSubject; }
	public ISubject getVarNameSubject() { return varNameSubject; }
	public ISubject getVarEndSubject() { return varEndSubject; }
	public ISubject getEolSubject() { return eolSubject; }
	public ISubject getJavaStartSubject() { return javaStartSubject; }
	public ISubject getJavaEndSubject() { return javaEndSubject; }
	public ISubject getJavaCodeSubject() { return javaCodeSubject; }
	public ISubject getTextSubject() { return textSubject; }
	public ISubject getEofSubject() { return eofSubject; }

	private ISubject startSubject = new SubjectImpl();
	private ISubject varStartSubject = new SubjectImpl();
	private ISubject varNameSubject = new SubjectImpl();
	private ISubject varEndSubject = new SubjectImpl();
	private ISubject eolSubject = new SubjectImpl();
	private ISubject javaStartSubject = new SubjectImpl();
	private ISubject javaEndSubject = new SubjectImpl();
	private ISubject javaCodeSubject = new SubjectImpl();
	private ISubject textSubject = new SubjectImpl();
	private ISubject eofSubject = new SubjectImpl();

	{
		// do initialization stuff here
	}

}
PARSER_END(TemplateParser)

TOKEN : { < EOL : "\n" | "\r" | "\r\n" > }
<DEFAULT> TOKEN : { < VAR_START : "${" >: IN_VAR_STATE}
<IN_VAR_STATE> TOKEN : { < VAR_END : "}" >: DEFAULT }
<IN_VAR_STATE> TOKEN : { <#DIGIT : ["0"-"9", "A"-"Z"] >}
<IN_VAR_STATE> TOKEN : { <#LETTER : ["a"-"z", "A"-"Z", "_"] >}
<IN_VAR_STATE> TOKEN : { < VAR_NAME : <LETTER>(<LETTER>|<DIGIT>)* > }
<DEFAULT> TOKEN : { < TEXT : ~[] > }

<DEFAULT> TOKEN : { < JAVA_START : "<?java" >: IN_JAVA_STATE}
<IN_JAVA_STATE> TOKEN : { < JAVA_END : "?>" >: DEFAULT }
<IN_JAVA_STATE> TOKEN : { < JAVA_CODE :~[] > }

void Start(Map aCtx):
{
	//org: executeTokenHandler(aCtx, ParserModeCV.KEY_START_MODE);
	startSubject.execute(aCtx);
}
{
	(
		varStart(aCtx)
	|
		varName(aCtx)
	|
		varEnd(aCtx)
	|
		eol(aCtx)
	|
		javaStart(aCtx)
	|
		javaEnd(aCtx)
	|
		javaCode(aCtx)
	|
		text(aCtx)
	)*
	eof(aCtx)
}

void text(Map aCtx):
{
	Token t;
}
{
	t = <TEXT>
	{
		ParserCV.setToken(aCtx, t);
		ParserCV.setValue(aCtx, t.image);
		ParserModeCV.setMode(aCtx, ParserModeCV.KEY_TEXT);
		textSubject.execute(aCtx);
	}
}

void varStart(Map aCtx):
{
	Token t;
}
{
	t = <VAR_START>
	{
		ParserCV.setToken(aCtx, t);
		ParserModeCV.setMode(aCtx, ParserModeCV.KEY_VAR_START_MODE);
		varStartSubject.execute(aCtx);
	}
}

void varName(Map aCtx):
{
	Token t;
}
{
	t = <VAR_NAME>
	{
		ParserCV.setToken(aCtx, t);
		ParserCV.setValue(aCtx, t.image);
		ParserModeCV.setMode(aCtx, ParserModeCV.KEY_VAR_NAME_MODE);
		varNameSubject.execute(aCtx);
	}
}

void varEnd(Map aCtx):
{
	Token t;
}
{
	t = <VAR_END>
	{
		ParserCV.setToken(aCtx, t);
		ParserModeCV.setMode(aCtx, ParserModeCV.KEY_VAR_END_MODE);
		varEndSubject.execute(aCtx);
	}
}

void javaStart(Map aCtx):
{
	Token t;
}
{
	t = <JAVA_START>
	{
		ParserCV.setToken(aCtx, t);
		ParserModeCV.setMode(aCtx, ParserModeCV.KEY_JAVA_START_MODE);
		javaStartSubject.execute(aCtx);
	}
}

void javaCode(Map aCtx):
{
	Token t;
}
{
	t = <JAVA_CODE>
	{
		ParserCV.setToken(aCtx, t);
		ParserCV.setValue(aCtx, t.image);
		ParserModeCV.setMode(aCtx, ParserModeCV.KEY_JAVA_CODE_MODE);
		javaCodeSubject.execute(aCtx);
	}
}

void javaEnd(Map aCtx):
{
	Token t;
}
{
	t = <JAVA_END>
	{
		ParserCV.setToken(aCtx, t);
		ParserModeCV.setMode(aCtx, ParserModeCV.KEY_JAVA_END_MODE);
		javaEndSubject.execute(aCtx);
	}
}

void eol(Map aCtx):
{
	Token t;
}
{
	t = <EOL>
	{
		ParserCV.setToken(aCtx, t);
		ParserModeCV.setMode(aCtx, ParserModeCV.KEY_EOL);
		eolSubject.execute(aCtx);
	}
}

void eof(Map aCtx):
{
	Token t;
}
{
	t = <EOF>
	{
		ParserCV.setToken(aCtx, t);
		ParserModeCV.setMode(aCtx, ParserModeCV.KEY_EOF);
		eofSubject.execute(aCtx);
	}
}

