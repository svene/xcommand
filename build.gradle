plugins {
  id "com.ofg.uptodate" version "1.6.2"
}

apply plugin: 'idea'
apply plugin: 'sonar'
apply plugin: 'sonar'

subprojects {
	buildscript {
		repositories {
			maven {
				url "https://plugins.gradle.org/m2/"
			}
		}
		dependencies {
			classpath "com.ofg:uptodate-gradle-plugin:1.6.2"
		}
	}

	apply plugin: 'java'
	apply plugin: 'groovy'
	apply plugin: 'idea'
	apply plugin: "com.ofg.uptodate"

	repositories {
		jcenter()
	}

	configurations {
		jacoco
	}

	dependencies {
//		classpath 'com.smokejumperit:gradle-plugins:0.3-SNAPSHOT'
		compile 'org.codehaus.groovy:groovy:1.7.8'
		testCompile 'junit:junit:4.8'
		testCompile 'org.testng:testng:5.14.10'
		testCompile "org.spockframework:spock-core:0.5-groovy-1.7"
		testCompile "cglib:cglib:2.2"
		testCompile "org.mockito:mockito-all:1.8.5"

		jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.3.201107060350", classifier: "runtime"
	}

	sourceCompatibility = 1.7
	targetCompatibility = 1.7


	task ('copyToLib', dependsOn: configurations.compile, type: Copy) {
		    into('build/_artifacts')
		    from configurations.default
		    from configurations.testCompile
		    from configurations.default.allArtifacts*.file
		    from configurations.testCompile.allArtifacts*.file
	}

	task renameJCC(type: Copy, dependsOn: 'copyToLib') {
		from('build/_artifacts/javacc-4.0.jar')
		into('build/_artifacts')
		rename('javacc-4.0.jar', 'javacc.jar')
	}



	version = '1.0'
	/*
	manifest.mainAttributes(
		'Implementation-Title': 'xcommand',
		'Implementation-Version': version
	)
*/
	uploadArchives {
		repositories {
		   flatDir(dirs: file('_repos'))
		}
	}
/*
	task testng(type: Test) {
		useTestNG()
		testResultsDir = new File(project.testResultsDir, '../testng')
		testReportDir = new File(project.testReportDir, '../testng')
	}

	check.dependsOn testng
*/
sonar {
  server {
    url = System.getProperty("sonar.host.url") ?: "http://localhost:9000/"
  }

/*
  database {
    url = System.getProperty("sonar.jdbc.url") ?: "jdbc:derby://localhost:1527/sonar"
    driverClassName = System.getProperty("sonar.jdbc.driver") ?: "org.apache.derby.jdbc.ClientDriver"
    username = System.getProperty("sonar.jdbc.username") ?: "sonar"
    password = System.getProperty("sonar.jdbc.password") ?: "sonar"
  }
*/

  project {
    withProjectProperties { props ->
      props["sonar.core.codeCoveragePlugin"] = "jacoco"
    }
  }
}

}

