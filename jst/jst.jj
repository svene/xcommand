options {
  STATIC = false;
  JAVA_UNICODE_ESCAPE = false;
}

PARSER_BEGIN(JSTParser)

package org.xcommand.template.jst.parser;

import org.xcommand.pattern.observer.INotifier;
import org.xcommand.pattern.observer.BasicNotifier;
import org.xcommand.template.parser.IParserCV;
import org.xcommand.core.DynaBeanProvider;
import org.xcommand.core.IDynaBeanProvider;
import org.xcommand.core.DynaBeanProvider;
import org.xcommand.core.ClassAndMethodKeyProvider;

public class JSTParser
{

	public INotifier getStartNotifier() { return startNotifier; }
	public INotifier getEolInCommentNotifier() { return eolInCommentNotifier; }
	public INotifier getEolInJavaNotifier() { return eolInJavaNotifier; }
	public INotifier getEofNotifier() { return eofNotifier; }

	public INotifier getCommentStartNotifier() { return commentStartNotifier; }
	public INotifier getCommentTextNotifier() { return commentTextNotifier; }
//	public INotifier getCommentDoubleQuoteNotifier() { return commentDoubleQuoteNotifier; }
	public INotifier getCommentEndNotifier() { return commentEndNotifier; }

	public INotifier getJavaTextNotifier() { return javaTextNotifier; }
	public INotifier getJavaVarStartNotifier() { return javaVarStartNotifier; }
	public INotifier getJavaVarNotifier() { return javaVarNotifier; }
	public INotifier getJavaVarEndNotifier() { return javaVarEndNotifier; }

	private INotifier startNotifier = new BasicNotifier();
	private INotifier eolInCommentNotifier = new BasicNotifier();
	private INotifier eolInJavaNotifier = new BasicNotifier();
	private INotifier eofNotifier = new BasicNotifier();

	private INotifier commentStartNotifier = new BasicNotifier();
	private INotifier commentTextNotifier = new BasicNotifier();
//	private INotifier commentDoubleQuoteNotifier = new BasicNotifier();
	private INotifier commentEndNotifier = new BasicNotifier();

	private INotifier javaTextNotifier = new BasicNotifier();
	private INotifier javaVarStartNotifier = new BasicNotifier();
	private INotifier javaVarNotifier = new BasicNotifier();
	private INotifier javaVarEndNotifier = new BasicNotifier();

	private IDynaBeanProvider dbp = DynaBeanProvider.newThreadBasedDynabeanProvider(new ClassAndMethodKeyProvider());
	private IParserCV parserCV = (IParserCV) dbp.newBeanForInterface(IParserCV.class);

	private boolean inCommentState = false;



	{
		// do initialization stuff here
	}

}
PARSER_END(JSTParser)


<DEFAULT> TOKEN : { < JAVA_EOL : "\n" | "\r" | "\r\n" > }
<DEFAULT> TOKEN : { < COMMENT_START : "/*#" >: IN_COMMENT_STATE}
<DEFAULT> TOKEN : { < JAVA_TEXT : ~[] > }
<IN_COMMENT_STATE> TOKEN : { < COMMENT_END : "#*/" >: DEFAULT }
<IN_COMMENT_STATE> TOKEN : { < COMMENT_TEXT : ~[] > }
<IN_COMMENT_STATE> TOKEN : { < COMMENT_EOL : "\n" | "\r" | "\r\n" > }

<IN_COMMENT_STATE> TOKEN : { < JAVA_EXPR_START : "$jv{" >: IN_JAVA_EXPR_STATE}
<IN_JAVA_EXPR_STATE> TOKEN : { < JAVA_EXPR_END : "}" >: IN_COMMENT_STATE }
<IN_JAVA_EXPR_STATE> TOKEN : { <#DIGIT : ["0"-"9", "A"-"Z"] >}
<IN_JAVA_EXPR_STATE> TOKEN : { <#LETTER : ["a"-"z", "A"-"Z", "_"] >}
<IN_JAVA_EXPR_STATE> TOKEN : { <#JAVA_CHARS : "." | "(" | ")" > }
<IN_JAVA_EXPR_STATE> TOKEN : { < JAVA_EXPR : (<LETTER>|<DIGIT>|<JAVA_CHARS>)* > }

void Start():
{
//<IN_JAVA_EXPR_STATE> TOKEN : { < JAVA_EXPR : <LETTER>(<LETTER>|<DIGIT>)*(<JAVA_CHARS>)*(<LETTER>|<DIGIT>)* > }
	startNotifier.execute();
}
{
	(
		javaEol()
	|
		javaText()
	|
		commentStart()
	|
		commentEnd()
	|
		commentText()
	|
		commentEol()
	|
		javaVarStart()
	|
		javaVarEnd()
	|
		javaVar()
	)*
	eof()
}

void javaText():
{
	Token t;
}
{
	t = <JAVA_TEXT>
	{
		parserCV.setToken(t);
		parserCV.setValue(t.image);
		///ParserModeCV.setMode(ParserModeCV.KEY_TEXT);
		javaTextNotifier.execute();
	}
}

void commentStart():
{
	Token t;
}
{
	t = <COMMENT_START>
	{
		//System.out.println("*** comment start found");
		parserCV.setToken(t);
		inCommentState = true;
		commentStartNotifier.execute();
	}
}

void commentText():
{
	Token t;
}
{
	t = <COMMENT_TEXT>
	{
		parserCV.setToken(t);
		parserCV.setValue(t.image);
		commentTextNotifier.execute();
	}
}

void commentEnd():
{
	Token t;
}
{
	t = <COMMENT_END>
	{
		//System.out.println("*** comment end found");
		parserCV.setToken(t);
		inCommentState = false;
		commentEndNotifier.execute();
	}
}

void javaVarStart():
{
	Token t;
}
{
	t = <JAVA_EXPR_START>
	{
		//System.out.println("*** java var start found");
		parserCV.setToken(t);
		///ParserModeCV.setMode(ParserModeCV.KEY_JAVA_START_MODE);
		javaVarStartNotifier.execute();
	}
}

void javaVar():
{
	Token t;
}
{
	t = <JAVA_EXPR>
	{
		//System.out.println("*** java var found");
		parserCV.setToken(t);
		parserCV.setValue(t.image);
		///ParserModeCV.setMode(ParserModeCV.KEY_JAVA_CODE_MODE);
		javaVarNotifier.execute();
	}
}

void javaVarEnd():
{
	Token t;
}
{
	t = <JAVA_EXPR_END>
	{
		//System.out.println("*** java var end found");
		parserCV.setToken(t);
		///ParserModeCV.setMode(ParserModeCV.KEY_JAVA_END_MODE);
		javaVarEndNotifier.execute();
	}
}

void javaEol():
{
	Token t;
}
{
	t = <JAVA_EOL>
	{
		parserCV.setToken(t);
		///ParserModeCV.setMode(ParserModeCV.KEY_EOL);
		eolInJavaNotifier.execute();
	}
}

void commentEol():
{
	Token t;
}
{
	t = <COMMENT_EOL>
	{
		parserCV.setToken(t);
		///ParserModeCV.setMode(ParserModeCV.KEY_EOL);
		eolInCommentNotifier.execute();
	}
}

void eof():
{
	Token t;
}
{
	t = <EOF>
	{
		parserCV.setToken(t);
		///ParserModeCV.setMode(ParserModeCV.KEY_EOF);
		eofNotifier.execute();
	}
}

